//DAY54



from typing import List


class Solution:
    def findNumberOfGoodComponent(self, e : int, v : int, edges : List[List[int]]) -> int:
        # code here
        m = {i+1:[] for i in range(v)}
        for e in edges:
            f=e[0]
            t=e[1]
            m[f].append(t)
            m[t].append(f)
        #print(m)
        res=0
        visited=[0 for i in range(v+1)]
        stack=[i+1 for i in range(v)]
        while len(stack)>0:
            v=stack.pop(0)
            if visited[v]:
                continue
            else:
                f=set([v])
                visited[v]=1
                ns=m[v]
                q=[]
                q.extend(ns)
                while len(q)>0:
                    n=q.pop(0)
                    if visited[n]:
                        continue
                    f.add(n)
                    visited[n]=1
                    q.extend(m[n])
                fsize = len(f)
                is_good=True
                for v in f:
                    if len(m[v]) != fsize-1:
                        is_good=False
                        break
                if is_good:
                    res+=1
                    
        return res

